CREATE DATABASE Uber;
USE uber;

CREATE TABLE Drivers(
    DriverID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15),
    City VARCHAR(20),
    VehicleType VARCHAR(20),
	Rating FLOAT
);


CREATE TABLE Riders(
    RiderID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
	Phone VARCHAR(15),
    City VARCHAR(20),
    JoinDate DATE
);


CREATE TABLE Rides(
	RideID INT AUTO_INCREMENT PRIMARY KEY,
	RiderID INT,
    DriverID INT,
    RideDate DATE,
    PickupLocation VARCHAR(200),
    DropLocation VARCHAR(200),
    Distance FLOAT,
    Fare FLOAT,
	RideStatus VARCHAR(50),
    FOREIGN KEY (RiderID) REFERENCES Riders(RiderID),
	FOREIGN KEY (DriverID) REFERENCES Drivers(DriverID)
);


CREATE TABLE Payments(
	PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    RideID INT,
    PaymentMethod VARCHAR(50),
    Amount FLOAT,
    PaymentDate DATE,
FOREIGN KEY (RideID) REFERENCES Rides(RideID)
);


INSERT INTO Drivers (FirstName,LastName,Phone,City,VehicleType,Rating) VALUES
('Vikram', 'Singh', '9876543210', 'Mumbai', 'Sedan', 4.8),
('Ravi', 'Kumar', '8765432109', 'Delhi', 'SUV', 4.5),
('Amit', 'Sharma', '7654321098', 'Bangalore', 'Hatchback', 4.2),
('Rajesh', 'Gupta', '9875468791', 'Pune', 'Sedan', 4.9),
('Anuj', 'Yadav', '9985476152', 'Kolkata', 'SUV', 4.7);


INSERT INTO Riders (FirstName, LastName, Phone, City, JoinDate) VALUES
('Anushka', 'Soni', '9977501239', 'Mumbai', '2024-08-10'),
('Rahul', 'Pal', '9955409876', 'Delhi', '2024-05-15'),
('Sneha', 'Patil', '7954687125', 'Bangalore', '2024-04-20'),
('Punam', 'Pandey', '8754691241', 'Pune', '2024-07-25'),
('Aayush', 'Kumar', '9985476121', 'Kolkata', '2024-02-05');


INSERT INTO Rides (RiderID, DriverID, RideDate, PickupLocation, DropLocation, Distance, Fare, RideStatus) VALUES
(1, 1, '2024-05-01', 'Andheri', 'Bandra', 10.5, 150, 'Completed'),
(2, 2, '2024-05-02', 'Connaught Place', 'Dwarka', 15.2, 200, 'Completed'),
(3, 3, '2024-05-03', 'MG Road', 'Koramangala', 8.0, 100, 'Cancelled'),
(4, 4, '2024-05-04', 'Kothrud', 'Hinjewadi', 20.0, 250, 'Completed'),
(5, 5, '2024-05-05', 'Salt Lake', 'New Town', 12.0, 180, 'Ongoing');


INSERT INTO Payments (RideID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 'Card', 150, '2024-05-01'),
(2, 'Cash', 200, '2024-05-02'),
(4, 'Wallet', 250, '2024-05-04');

1. Retrieve the names and contact details of all drivers with a rating of 4.5 or higher.

SELECT FirstName , Phone
FROM Drivers 
WHERE Rating >= 4.5 ;

2. Find the total number of rides completed by each driver.

SELECT d.FirstName, d.LastName, COUNT(r.RideID) AS TotalCompletedRides
FROM Drivers d
JOIN Rides r ON d.DriverID = r.DriverID
WHERE r.RideStatus = 'Completed'
GROUP BY d.DriverID;


SELECT r.DriverID, COUNT(r.RideID) AS TotalCompletedRides
FROM Rides r
WHERE r.RideStatus = 'Completed'
GROUP BY r.DriverID;

3. List all riders who have never booked a ride

SELECT r.FirstName,r.LastName
FROM Riders r 
LEFT JOIN Rides rr ON r.RiderID = rr.RiderID
WHERE rr.RideID IS NULL ;

4 Calculate the total earnings of each driver from completed rides

SELECT SUM(rr.Fare) , rr.DriverID
FROM Rides rr 
WHERE rr.RideStatus = "Completed"
GROUP BY rr.DriverID;


SET SQL_SAFE_UPDATES = 0;

DELETE FROM Payments
WHERE RideID NOT IN (SELECT RideID FROM temp_rides);

DELETE FROM Rides
WHERE RideID NOT IN (SELECT RideID FROM temp_rides);

SET foreign_key_checks = 1;


SELECT SUM(rr.Fare) , rr.DriverID
FROM Rides rr 
WHERE rr.RideStatus = "Completed"
GROUP BY rr.DriverID;

5. Retrieve the most recent ride for each rider.
SELECT r.RiderID, r.FirstName, r.LastName, MAX(rd.RideDate) AS RecentRide
FROM Riders r
JOIN Rides rd ON r.RiderID = rd.RiderID
GROUP BY r.RiderID, r.FirstName, r.LastName;

6. Count the number of rides taken in each city.

SELECT COUNT(r.RideID) , rr.City AS City
FROM Rides r 
JOIN Riders rr ON r.RiderID = rr.RiderID
GROUP BY rr.City;

7. List all rides where the distance was greater than 20 km.
SELECT r.Distance , r.RideID
FROM Rides r
WHERE r.Distance >= 6.0;

8. Identify the most preferred payment method.
SELECT MAX(p.PaymentMethod) 
FROM Payments p;


9. Find the top 3 highest-earning drivers

SELECT d.FirstName, d.LastName, SUM(r.Fare) AS TotalEarnings
FROM Drivers d
JOIN Rides r ON d.DriverID = r.DriverID
WHERE r.RideStatus = 'Completed'
GROUP BY d.DriverID, d.FirstName, d.LastName
ORDER BY TotalEarnings DESC
LIMIT 3;

10. Retrieve details of all cancelled rides along with the rider's and driver's names.

SELECT 
    r.FirstName AS RiderName, 
    d.FirstName AS DriverName
FROM 
    Rides rr
JOIN 
    Riders r ON rr.RiderID = r.RiderID
JOIN 
    Drivers d ON rr.DriverID = d.DriverID
WHERE 
    rr.RideStatus = 'Cancelled';
