CREATE DATABASE Swiggy;
USE Swiggy;

CREATE TABLE Restaurants (
    RestaurantID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50),
    Rating FLOAT CHECK (Rating BETWEEN 0 AND 5),
    AverageCostForTwo DECIMAL(10, 2)
);


CREATE TABLE Customers (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15),
    City VARCHAR(50),
    JoinDate DATE
);


CREATE TABLE Orders (
    OrderID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10, 2),
    OrderStatus ENUM('Delivered', 'Cancelled', 'Pending'),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);



CREATE TABLE Reviews (
    ReviewID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating FLOAT CHECK (Rating BETWEEN 0 AND 5),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);



CREATE TABLE Payments (
    PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    OrderID INT,
    PaymentMethod ENUM('Card', 'Cash', 'Wallet'),
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

INSERT INTO Restaurants (Name, City, CuisineType, Rating, AverageCostForTwo)
VALUES 
('The Great Indian Tandoor', 'Mumbai', 'Indian', 4.8, 1500),
('Pizza Mania', 'Mumbai', 'Italian', 4.5, 1200),
('Dragonâ€™s Delight', 'Delhi', 'Chinese', 4.3, 1000),
('Pasta Palace', 'Bangalore', 'Italian', 4.7, 1800),
('Urban Bites', 'Mumbai', 'Continental', 4.2, 1400);


INSERT INTO Customers (FirstName, LastName, Phone, City, JoinDate)
VALUES 
('John', 'Doe', '9876543210', 'Mumbai', '2023-01-01'),
('Jane', 'Smith', '8765432109', 'Delhi', '2023-02-15'),
('Robert', 'Brown', '7654321098', 'Bangalore', '2023-03-10'),
('Alice', 'Johnson', '6543210987', 'Mumbai', '2023-04-20'),
('Michael', 'Williams', '5432109876', 'Mumbai', '2023-05-30');


INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus)
VALUES 
(1, 1, '2023-06-01', 1200, 'Delivered'),
(2, 3, '2023-06-05', 800, 'Cancelled'),
(3, 4, '2023-06-10', 1800, 'Delivered'),
(4, 2, '2023-06-15', 1000, 'Pending'),
(5, 5, '2023-06-20', 1400, 'Delivered');


INSERT INTO Reviews (CustomerID, RestaurantID, Rating, Comment, ReviewDate)
VALUES 
(1, 1, 5, 'Amazing food and service!', '2023-06-02'),
(2, 3, 4, 'Good food, but delivery was late.', '2023-06-06'),
(3, 4, 5, 'Loved the pasta! Highly recommended.', '2023-06-11'),
(4, 2, 3, 'Average experience.', '2023-06-16'),
(5, 5, 4.5, 'Great ambiance and tasty food.', '2023-06-21');



INSERT INTO Payments (OrderID, PaymentMethod, Amount, PaymentDate)
VALUES 
(1, 'Card', 1200, '2023-06-01'),
(3, 'Wallet', 1800, '2023-06-10'),
(5, 'Cash', 1400, '2023-06-20');

1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT Name, City
FROM Restaurants
WHERE Rating >= 4.5;

2 Find the total number of orders placed by each customer.
SELECT c.FirstName, c.LastName, COUNT(o.OrderID) AS TotalOrders
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID;

3 List all restaurants offering "Italian" cuisine in "Mumbai".
SELECT Name, City, CuisineType
FROM Restaurants
WHERE CuisineType = 'Italian' AND City = 'Mumbai';

4 Calculate the total revenue generated by each restaurant from completed orders.

SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID;

5 Retrieve the most recent order placed by each customer.
SELECT c.FirstName, c.LastName, o.OrderID, o.OrderDate, o.OrderAmount
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate)
    FROM Orders o2
    WHERE o2.CustomerID = c.CustomerID
);

6  List customers who have not placed any orders yet.
SELECT c.FirstName, c.LastName
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;

7 Identify the most reviewed restaurants.

SELECT r.Name, COUNT(rv.ReviewID) AS ReviewCount
FROM Restaurants r
JOIN Reviews rv ON r.RestaurantID = rv.RestaurantID
GROUP BY r.RestaurantID
ORDER BY ReviewCount DESC
LIMIT 1;

8 Find the most preferred payment method.
SELECT PaymentMethod, COUNT(*) AS Frequency
FROM Payments
GROUP BY PaymentMethod
ORDER BY Frequency DESC
LIMIT 1;

9 List the top 5 restaurants by total revenue.
SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue
FROM Restaurants r
JOIN Orders o ON r.RestaurantID = o.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.RestaurantID
ORDER BY TotalRevenue DESC
LIMIT 5;


10 Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT o.OrderID, o.OrderDate, o.OrderAmount, o.OrderStatus, c.FirstName AS CustomerFirstName, c.LastName AS CustomerLastName, r.Name AS RestaurantName
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';
